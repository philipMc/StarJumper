/*
-----------------------------------------------------------------------------
Filename:    test.h
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for VC10 (July 2011)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/
#ifndef TEST_H
#define TEST_H

#include "BaseApplication.h"
#include "Player.h"
#include "Platforms.h"
#include "PickUpManager.h"
#include "CollisionManager.h"
#include "DebugDrawer.h"
#include "SoundManager.h"

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#include "../res/resource.h"
#endif


class Test : public BaseApplication
{
public:
    Test();
    virtual ~Test();
	Ogre::Vector3 getCameraMinPos();
	Ogre::Vector3 getCameraMaxPos();

private:
	int cameraMax, cameraMin;

protected:
    virtual void createScene(void);
    bool frameRenderingQueued(const Ogre::FrameEvent& evt);
	Ogre::Vector3 minCamPos, maxCamPos;
	// methods for key input
	bool keyPressed( const OIS::KeyEvent &evt );
	bool keyReleased( const OIS::KeyEvent& evt );
		private:
		Player *mPlayer;
		Platforms *mPlatform;
		PickUpManager * mPickUpManager;		
		bool backGroundMusic;
		bool listener;
		bool effects;
		bool reverbOn;
		FMOD::Channel * sourceChannel;
};

#endif // #ifndef __test_h_
